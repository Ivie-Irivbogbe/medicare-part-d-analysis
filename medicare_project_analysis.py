# -*- coding: utf-8 -*-
"""Copy of Project_Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Z0QASiOrm1nmmuXQM-Q9OUhP9-9bCxDV
"""

from google.colab import auth
auth.authenticate_user()
print('Authenticated')

from google.cloud import bigquery

client = bigquery.Client(project='udiirivbogbe')

# Define your SQL query
query = """
WITH DoctorPayments AS (
  SELECT
    Covered_Recipient_NPI,
    COUNT(*) AS ReceivedPayment
  FROM (
    SELECT Covered_Recipient_NPI FROM `udiirivbogbe.Open_payment.pgyr2018`
    UNION ALL
    SELECT Covered_Recipient_NPI FROM `udiirivbogbe.Open_payment.pgyr2019`
    UNION ALL
    SELECT Covered_Recipient_NPI FROM `udiirivbogbe.Open_payment.pgyr2020`
    UNION ALL
    SELECT Covered_Recipient_NPI FROM `udiirivbogbe.Open_payment.pgyr2021`
    UNION ALL
    SELECT Covered_Recipient_NPI FROM `udiirivbogbe.Open_payment.pgyr2022`
  ) GROUP BY Covered_Recipient_NPI
),
PrescriptionSummary AS (
  SELECT
    pd.Prscrbr_NPI,
    COUNT(*) AS TotalClaims
  FROM
    `udiirivbogbe.Medicare.medicare_partd` pd
  GROUP BY
    pd.Prscrbr_NPI
)
SELECT
  IF(dp.ReceivedPayment IS NOT NULL, 'Received Payments', 'No Payments') AS PaymentStatus,
  COUNT(*) AS NumberOfDoctors,
  AVG(ps.TotalClaims) AS AvgTotalClaims,
  ROUND((COUNT(*) * 100.0) / (SELECT COUNT(*) FROM PrescriptionSummary), 2) AS PercentageOfDoctors
FROM
  PrescriptionSummary ps
LEFT JOIN
  DoctorPayments dp ON ps.Prscrbr_NPI = dp.Covered_Recipient_NPI
GROUP BY
  PaymentStatus;
"""

# Run the query and convert it to a pandas DataFrame
df = client.query(query).to_dataframe()

df

# Define your SQL query
query = """
SELECT
  EXTRACT(YEAR FROM Date_of_Payment) AS Payment_Year,
  SUM(Total_Amount_of_Payment_USDollars) AS Total_Payments
FROM (
  SELECT Date_of_Payment, Total_Amount_of_Payment_USDollars FROM `udiirivbogbe.Open_payment.pgyr2018`
  UNION ALL
  SELECT Date_of_Payment, Total_Amount_of_Payment_USDollars FROM `udiirivbogbe.Open_payment.pgyr2019`
  UNION ALL
  SELECT Date_of_Payment, Total_Amount_of_Payment_USDollars FROM `udiirivbogbe.Open_payment.pgyr2020`
  UNION ALL
  SELECT Date_of_Payment, Total_Amount_of_Payment_USDollars FROM `udiirivbogbe.Open_payment.pgyr2021`
  UNION ALL
  SELECT Date_of_Payment, Total_Amount_of_Payment_USDollars FROM `udiirivbogbe.Open_payment.pgyr2022`
) AS combined_payments
GROUP BY Payment_Year
"""

df2 = client.query(query).to_dataframe()

df2

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import matplotlib.ticker as ticker
from matplotlib.ticker import FuncFormatter

# Convert 'Payment_Year' to integer
df2['Payment_Year'] = df2['Payment_Year'].astype(int)

# Sort the DataFrame by 'Payment_Year'
df2 = df2.sort_values(by='Payment_Year').reset_index(drop=True)

# Plotting
plt.figure(figsize=(10, 6))
plt.plot(df2['Payment_Year'], df2['Total_Payments'], marker='o', linestyle='-', color='purple')

# Format the y-axis to show values in billions and add data labels to each point
plt.gca().yaxis.set_major_formatter(ticker.FuncFormatter(lambda x, pos: f'{x/1e9:.1f}B'))

for year, payment in zip(df2['Payment_Year'], df2['Total_Payments']):
    plt.text(year, payment, f'{payment/1e9:.1f}B', ha='center', va='bottom', backgroundcolor='beige')

# Set x-axis ticks to correspond to the unique sorted years
plt.xticks(df2['Payment_Year'].unique())

# Customize gridlines
plt.grid(color='grey', linestyle='--', linewidth=0.5)

# Set labels
plt.xlabel('Year')
plt.ylabel('Total Payments ($)')
plt.title('Total Payments by Year')

# Plot
plt.tight_layout()
plt.show()

# Define your SQL query
query = """
WITH aggregated_payments AS (
  SELECT
    mp.Rndrng_Prvdr_Gndr AS Gender,
    EXTRACT(YEAR FROM op.Date_of_Payment) AS Payment_Year,
    SUM(op.Total_Amount_of_Payment_USDollars) AS Total_Payments
  FROM (
    SELECT Rndrng_NPI, Rndrng_Prvdr_Gndr FROM `udiirivbogbe.Medicare.medicare_physician`
  ) mp
  JOIN (
    SELECT Covered_Recipient_NPI, Date_of_Payment, Total_Amount_of_Payment_USDollars FROM `udiirivbogbe.Open_payment.pgyr2018`
    UNION ALL
    SELECT Covered_Recipient_NPI, Date_of_Payment, Total_Amount_of_Payment_USDollars FROM `udiirivbogbe.Open_payment.pgyr2019`
    UNION ALL
    SELECT Covered_Recipient_NPI, Date_of_Payment, Total_Amount_of_Payment_USDollars FROM `udiirivbogbe.Open_payment.pgyr2020`
    UNION ALL
    SELECT Covered_Recipient_NPI, Date_of_Payment, Total_Amount_of_Payment_USDollars FROM `udiirivbogbe.Open_payment.pgyr2021`
    UNION ALL
    SELECT Covered_Recipient_NPI, Date_of_Payment, Total_Amount_of_Payment_USDollars FROM `udiirivbogbe.Open_payment.pgyr2022`
  ) op ON mp.Rndrng_NPI = op.Covered_Recipient_NPI
  GROUP BY Gender, Payment_Year
),
yearly_totals AS (
  SELECT
    Payment_Year,
    SUM(Total_Payments) AS Yearly_Total_Payments
  FROM aggregated_payments
  GROUP BY Payment_Year
)
SELECT
  ap.Gender,
  ap.Payment_Year,
  ap.Total_Payments,
  (ap.Total_Payments / yt.Yearly_Total_Payments) * 100 AS Percentage_of_Total_Payments
FROM aggregated_payments ap
JOIN yearly_totals yt ON ap.Payment_Year = yt.Payment_Year
ORDER BY ap.Payment_Year, ap.Gender;"""

df3 = client.query(query).to_dataframe()

df3

print(df3.isnull().sum())
df3 = df3.iloc[1:]
df3

import matplotlib.pyplot as plt
import pandas as pd
import numpy as np

# Creating a pivot table
pivot_df = df3.pivot(index='Payment_Year', columns='Gender', values='Percentage_of_Total_Payments').fillna(0)

# Plotting
fig, ax = plt.subplots(figsize=(10, 6))

# Setting the positions and width for the bars
positions = np.arange(len(pivot_df))
width = 0.35

# Plotting the bars for Male and Female percentages
bars1 = ax.bar(positions - width/2, pivot_df['M'], width, label='Male', alpha=0.7)
bars2 = ax.bar(positions + width/2, pivot_df['F'], width, label='Female', alpha=0.7)

# Adding labels for each bar with only two decimal points
for bars in [bars1, bars2]:
    for bar in bars:
        height = bar.get_height()
        ax.annotate(f'{height:.2f}%',
                    xy=(bar.get_x() + bar.get_width() / 2, height),
                    xytext=(0, 3),  # 3 points vertical offset
                    textcoords="offset points",
                    ha='center', va='bottom')

# Setting the x-axis labels to the years, and y-axis label
ax.set_xticks(positions)
ax.set_xticklabels(pivot_df.index)
ax.set_ylabel('Total Payments(%)')

# Adding a title and a legend
plt.title('Percentage of Total Payments by Gender Over Years')
plt.legend()

# Showing the plot
plt.show()

# Define your SQL query
query = """
 WITH aggregated_payments AS (
  SELECT
    Covered_Recipient_NPI AS DoctorID,
    SUM(Total_Amount_of_Payment_USDollars) AS TotalPayments
  FROM (
    SELECT Covered_Recipient_NPI, Total_Amount_of_Payment_USDollars FROM `udiirivbogbe.Open_payment.pgyr2018`
    UNION ALL
    SELECT Covered_Recipient_NPI, Total_Amount_of_Payment_USDollars FROM `udiirivbogbe.Open_payment.pgyr2019`
    UNION ALL
    SELECT Covered_Recipient_NPI, Total_Amount_of_Payment_USDollars FROM `udiirivbogbe.Open_payment.pgyr2020`
    UNION ALL
    SELECT Covered_Recipient_NPI, Total_Amount_of_Payment_USDollars FROM `udiirivbogbe.Open_payment.pgyr2021`
    UNION ALL
    SELECT Covered_Recipient_NPI, Total_Amount_of_Payment_USDollars FROM `udiirivbogbe.Open_payment.pgyr2022`
  )
  GROUP BY DoctorID
),
prescriptions_summary AS (
  SELECT
    p.Prscrbr_NPI AS DoctorID,
    p.Gnrc_Name AS Drug_Name,
    SUM(p.Tot_Clms) AS TotalPrescriptions
  FROM
    `udiirivbogbe.Medicare.medicare_partd` p
  GROUP BY DoctorID, Drug_Name
),
combined_data AS (
  SELECT
    ps.DoctorID,
    ps.Drug_Name,
    ps.TotalPrescriptions,
    COALESCE(ap.TotalPayments, 0) AS TotalPayments
  FROM
    prescriptions_summary ps
    LEFT JOIN aggregated_payments ap ON ps.DoctorID = ap.DoctorID
)
SELECT
  Drug_Name,
  AVG(TotalPrescriptions) AS AvgPrescriptions,
  AVG(TotalPayments) AS AvgPayments
FROM
  combined_data
GROUP BY
  Drug_Name
ORDER BY
  AvgPrescriptions DESC, AvgPayments DESC;"""

df4 = client.query(query).to_dataframe()

df4

import statsmodels.api as sm
import pandas as pd

# Predictor
X = df4['AvgPayments']

# Response
Y = df4['AvgPrescriptions']

# Adding a constant to the model for the intercept
X = sm.add_constant(X)

# Creating the OLS model
model = sm.OLS(Y, X).fit()

# Making predictions
predictions = model.predict(X)

# Printing the model summary
print(model.summary())

from scipy import stats
from scipy.stats import pearsonr

# First, define 'high' and 'low' payment groups based on a threshold. This threshold could be the median payment.
threshold = df4['AvgPayments'].median()
high_df4 = df4[df4['AvgPayments'] > threshold]
low_df4 = df4[df4['AvgPayments'] <= threshold]

# Perform a t-test between the two groups
t_stat, p_val = stats.ttest_ind(high_df4['AvgPrescriptions'], low_df4['AvgPrescriptions'])

# Calculate the Pearson correlation
correlation, p_value = pearsonr(df4['AvgPayments'], df4['AvgPrescriptions'])

print(f"T-statistic: {t_stat}, P-value: {p_val}")
print(f'Correlation coefficient: {correlation}')

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from scipy.stats import pearsonr

# Ensure data types are correct
df4['AvgPrescriptions'] = pd.to_numeric(df4['AvgPrescriptions'], errors='coerce')
df4['AvgPayments'] = pd.to_numeric(df4['AvgPayments'], errors='coerce')

# Remove any NaN values before performing the regression
df4 = df4.dropna(subset=['AvgPrescriptions', 'AvgPayments'])

# Calculate coefficients for the regression line (line of best fit)
coefficients = np.polyfit(df4['AvgPrescriptions'], df4['AvgPayments'], 1)

# Create a polynomial function from the coefficients
poly_func = np.poly1d(coefficients)

correlation_coef, _ = pearsonr(df4['AvgPrescriptions'], df4['AvgPayments'])

# Plotting
plt.figure(figsize=(12, 8))

# Create a scatter plot with semi-transparent markers
plt.scatter(df4['AvgPrescriptions'], df4['AvgPayments'], alpha=0.5, s=30)  # Adjust 's' for marker size

# Add the regression line to the scatter plot
plt.plot(df4['AvgPrescriptions'], poly_func(df4['AvgPrescriptions']), color='red', linewidth=2)

# Set axis labels
plt.xlabel('Average Prescriptions')
plt.ylabel('Average Payments')

# Add the correlation coefficient as text on the plot
plt.text(x=max(df4['AvgPrescriptions']) * 0.8,
         y=max(df4['AvgPayments']) * 0.9,
         s=f'Correlation: {correlation_coef:.2f}',
         fontsize=12)

# Set plot title
plt.title('Average Payments vs. Average Prescriptions')

# Set the axis limits to start from 0
plt.xlim(left=0)
plt.ylim(bottom=0)

# Format y-axis to have a comma separator for thousands
plt.gca().yaxis.set_major_formatter(plt.FuncFormatter(lambda x, _: f'{int(x):,}'))

# Improve grid visibility
plt.grid(color='grey', linestyle='--', linewidth=0.5, which='both')

# Show plot
plt.tight_layout()
plt.show()

# Define your SQL query
query = """
WITH aggregated_payments AS (
  SELECT
    Covered_Recipient_NPI,
    SUM(Total_Amount_of_Payment_USDollars) AS Total_Payments
  FROM (
    SELECT Covered_Recipient_NPI, Total_Amount_of_Payment_USDollars FROM `udiirivbogbe.Open_payment.pgyr2018`
    UNION ALL
    SELECT Covered_Recipient_NPI, Total_Amount_of_Payment_USDollars FROM `udiirivbogbe.Open_payment.pgyr2019`
    UNION ALL
    SELECT Covered_Recipient_NPI, Total_Amount_of_Payment_USDollars FROM `udiirivbogbe.Open_payment.pgyr2020`
    UNION ALL
    SELECT Covered_Recipient_NPI, Total_Amount_of_Payment_USDollars FROM `udiirivbogbe.Open_payment.pgyr2021`
    UNION ALL
    SELECT Covered_Recipient_NPI, Total_Amount_of_Payment_USDollars FROM `udiirivbogbe.Open_payment.pgyr2022`
  ) combined_payments
  GROUP BY Covered_Recipient_NPI
)

SELECT
  p.Rndrng_Prvdr_Type AS Specialty,
  COUNT(DISTINCT p.Rndrng_NPI) AS Num_Prescribers,
  SUM(pd.Tot_Clms) AS Total_Claims,
  COUNT(DISTINCT pd.Brnd_Name) AS Brand_Name_Prescriptions,
  COUNT(DISTINCT pd.Gnrc_Name) AS Generic_Prescriptions,
  COALESCE(SUM(pay.Total_Payments), 0) AS Total_Payments
FROM
  `udiirivbogbe.Medicare.medicare_physician` p
JOIN
  `udiirivbogbe.Medicare.medicare_partd` pd ON p.Rndrng_NPI = pd.Prscrbr_NPI
LEFT JOIN
  aggregated_payments pay ON p.Rndrng_NPI = pay.Covered_Recipient_NPI
GROUP BY
  Specialty
ORDER BY
  Total_Claims DESC, Specialty
  LIMIT 20"""

df5 = client.query(query).to_dataframe()

df5

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from matplotlib.ticker import FuncFormatter

# Assuming df5 is the DataFrame with the data loaded
# Ensure the data types are correct
df5['Total_Claims'] = pd.to_numeric(df5['Total_Claims'], errors='coerce')
df5['Specialty'] = df5['Specialty'].astype(str)

# Convert 'Total_Claims' to billions and keep two decimal places
df5['Total_Claims'] = df5['Total_Claims'] / 1e9

# Set the style
sns.set_style("whitegrid")

# Plotting the bar chart without specifying the palette to avoid the warning
plt.figure(figsize=(14, 8))
barplot = sns.barplot(data=df5, x='Total_Claims', y='Specialty')

# Format the x-axis as billions with a 'B' suffix
barplot.xaxis.set_major_formatter(FuncFormatter(lambda x, _: f'{x:.0f}B'))

# Adding data bar labels with 'B' for billions
for p in barplot.patches:
    width = p.get_width()
    plt.text(width + 0.02,
             p.get_y() + p.get_height() / 2,
             f'{width:.2f}B',
             va='center')

# Set axis labels and title
plt.xlabel('Total Claims')
plt.ylabel('Specialty')
plt.title('Total Claims by Specialty')

# Show the plot
plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
from matplotlib.ticker import FuncFormatter

df5['Total_Payments'] = pd.to_numeric(df5['Total_Payments'], errors='coerce')
df5['Total_Payments'] = df5['Total_Payments'] / 1e9

# Make sure 'Specialty' is a string to avoid any plotting issues.
df5['Specialty'] = df5['Specialty'].astype(str)

# Set the seaborn style for better aesthetics.
sns.set_style("whitegrid")

# Create the plot.
plt.figure(figsize=(14, 8))
barplot = sns.barplot(data=df5, x='Total_Payments', y='Specialty', palette='viridis')

# Format the x-axis to display the 'Total Payments' in billions with a 'B' suffix.
barplot.set_xlabel('Total Payments')
barplot.xaxis.set_major_formatter(FuncFormatter(lambda x, _: f'${x:.0f}B'))

# Adding labels to each bar for clarity.
for p in barplot.patches:
    width = p.get_width()
    plt.text(width + 0.05,
             p.get_y() + p.get_height() / 2,
             f'${width:.2f}B',
             va='center')

# Set the title and the y-axis label.
plt.title('Total Payments by Specialty')
plt.ylabel('Specialty')

# Display the plot.
plt.tight_layout()
plt.show()

# Define your SQL query
query = """
SELECT
  Brnd_Name AS BrandName,
  Gnrc_Name AS GenericName,
  COUNT(*) AS NumberOfPrescriptions,
  AVG(Tot_Drug_Cst) AS AverageCost
FROM
  `udiirivbogbe.Medicare.medicare_partd`
GROUP BY
  Brnd_Name, Gnrc_Name
ORDER BY
  NumberOfPrescriptions DESC
LIMIT 10;"""

df6 = client.query(query).to_dataframe()

df6

import matplotlib.pyplot as plt
import seaborn as sns
from matplotlib.ticker import FuncFormatter

# Function to format the y-axis labels
def thousands(x, pos):
    return '%1.1fK' % (x * 1e-3)

# Ensure data types are correct
df6['NumberOfPrescriptions'] = pd.to_numeric(df6['NumberOfPrescriptions'], errors='coerce')
df6['AverageCost'] = pd.to_numeric(df6['AverageCost'], errors='coerce')

# Set the style
sns.set_style("whitegrid")

# Plotting the bar chart
fig, ax1 = plt.subplots(figsize=(14, 10))
ax1.bar(df6['BrandName'], df6['NumberOfPrescriptions'], color='dodgerblue')

# Set the y-axis label formatter for thousands
ax1.yaxis.set_major_formatter(FuncFormatter(thousands))

# Create a second y-axis for the average cost
ax2 = ax1.twinx()
ax2.plot(df6['BrandName'], df6['AverageCost'], color='crimson', marker='o', label='Average Cost')
ax2.set_ylabel('Average Cost ($)')

# Adding data labels for the bars
for p in ax1.patches:
    ax1.annotate(format(p.get_height(), '.0f'),
                 (p.get_x() + p.get_width() / 2., p.get_height()),
                 ha = 'center', va = 'center',
                 xytext = (0, 10),
                 textcoords = 'offset points')

# Adding data labels for the line plot
for i, txt in enumerate(df6['AverageCost']):
    ax2.annotate(f'${txt:.2f}',
                 (df6['BrandName'][i], df6['AverageCost'][i]),
                 ha='center', va='bottom')

# Set axis labels and title
ax1.set_xlabel('Drug Name')
ax1.set_ylabel('Number of Prescriptions (Thousands)')
plt.title('Top 10 Drugs: Number of Prescriptions and Average Cost')

# Set the x-axis labels and rotate them
ax1.set_xticklabels(df6['BrandName'], rotation=45, ha='right')

# Hide grid
ax1.grid(False)

# Adjust y-axis of ax2 to have the same baseline as ax1
ax2.set_ylim(bottom=0)

# Show legend
ax2.legend(loc='upper right')

# Show the plot
plt.tight_layout()
plt.show()

# Define your SQL query
query = """
WITH PrescriptionCounts AS (
  SELECT
    mp.Rndrng_Prvdr_Type AS DoctorSpecialty,
    pd.Gnrc_Name AS GenericDrugName,
    COUNT(*) AS TotalPrescriptions
  FROM
    `udiirivbogbe.Medicare.medicare_partd` pd
  JOIN
    `udiirivbogbe.Medicare.medicare_physician` mp ON pd.Prscrbr_NPI = mp.Rndrng_NPI
  GROUP BY
    DoctorSpecialty,
    GenericDrugName
),
RankedPrescriptions AS (
  SELECT
    *,
    RANK() OVER (PARTITION BY DoctorSpecialty ORDER BY TotalPrescriptions DESC) AS PrescriptionRank
  FROM
    PrescriptionCounts
)
SELECT
  DoctorSpecialty,
  GenericDrugName,
  TotalPrescriptions
FROM
  RankedPrescriptions
WHERE
  PrescriptionRank = 1
ORDER BY
  TotalPrescriptions DESC,  DoctorSpecialty;
"""

df7 = client.query(query).to_dataframe()

df7

# Define your SQL query
query = """
WITH PrescriptionCounts AS (
  SELECT
    mp.Rndrng_Prvdr_State_Abrvtn AS State,
    mp.Rndrng_Prvdr_Type AS DoctorSpecialty,
    pd.Gnrc_Name AS GenericDrugName,
    COUNT(*) AS TotalPrescriptions
  FROM
    `udiirivbogbe.Medicare.medicare_partd` pd
  JOIN
    `udiirivbogbe.Medicare.medicare_physician` mp ON pd.Prscrbr_NPI = mp.Rndrng_NPI
  GROUP BY
    State, DoctorSpecialty, GenericDrugName
),
RankedPrescriptions AS (
  SELECT
    *,
    RANK() OVER (PARTITION BY State, DoctorSpecialty ORDER BY TotalPrescriptions DESC) AS PrescriptionRank
  FROM
    PrescriptionCounts
)
SELECT
  State,
  DoctorSpecialty,
  GenericDrugName,
  TotalPrescriptions
FROM
  RankedPrescriptions
WHERE
  PrescriptionRank = 1
ORDER BY
  TotalPrescriptions DESC, DoctorSpecialty, State;
"""

df8 = client.query(query).to_dataframe()

df8

# Define your SQL query
query = """
SELECT
  p.Rndrng_Prvdr_State_Abrvtn AS State,
  COUNT(p.Rndrng_NPI) AS Num_Prescribers,
  SUM(mpd.Tot_Clms) AS Total_Claims,
  SUM(mpd.Tot_Drug_Cst) AS Total_Drug_Cost
FROM
  `udiirivbogbe.Medicare.medicare_partd` mpd
JOIN
  `udiirivbogbe.Medicare.medicare_physician` p ON mpd.Prscrbr_NPI = p.Rndrng_NPI
GROUP BY
  State;"""

df9 = client.query(query).to_dataframe()

df9

# Define your SQL query
query = """
WITH Provider_Prescription_Info AS (
  SELECT
    mr.NPI AS Provider_NPI,
    mr.Provider_First_Name,
    mr.Provider_Last_Name,
    mr.Grd_yr AS Graduation_Year,
    mr.pri_spec AS Primary_Specialty,
    mr.City_Town AS City,
    mr.State AS State,
    COUNT(*) AS Total_Prescriptions
  FROM
    `udiirivbogbe.Medicare.medicare_records` mr
  JOIN
    `udiirivbogbe.Medicare.medicare_partd` mpd ON mr.NPI = mpd.Prscrbr_NPI
  WHERE
    mr.Grd_yr >= 2010
  GROUP BY
    mr.NPI, mr.Provider_First_Name, mr.Provider_Last_Name, mr.Grd_yr, mr.pri_spec, mr.City_Town, mr.State
),
Provider_Payment_Info AS (
  SELECT
    op.Covered_Recipient_NPI AS Provider_NPI,
    SUM(op.Total_Amount_of_Payment_USDollars) AS Total_Payments
  FROM (
    SELECT
      Covered_Recipient_NPI,
      Date_of_Payment,
      Total_Amount_of_Payment_USDollars
    FROM
      `udiirivbogbe.Open_payment.pgyr2018`
    UNION ALL
    SELECT
      Covered_Recipient_NPI,
      Date_of_Payment,
      Total_Amount_of_Payment_USDollars
    FROM
      `udiirivbogbe.Open_payment.pgyr2019`
    UNION ALL
    SELECT
      Covered_Recipient_NPI,
      Date_of_Payment,
      Total_Amount_of_Payment_USDollars
    FROM
      `udiirivbogbe.Open_payment.pgyr2020`
    UNION ALL
    SELECT
      Covered_Recipient_NPI,
      Date_of_Payment,
      Total_Amount_of_Payment_USDollars
    FROM
      `udiirivbogbe.Open_payment.pgyr2021`
    UNION ALL
    SELECT
      Covered_Recipient_NPI,
      Date_of_Payment,
      Total_Amount_of_Payment_USDollars
    FROM
      `udiirivbogbe.Open_payment.pgyr2022`
  ) op
  WHERE
    EXTRACT(YEAR FROM op.Date_of_Payment) BETWEEN 2018 AND 2022
  GROUP BY
    op.Covered_Recipient_NPI
)
SELECT
  ppi.Provider_NPI,
  ppi.Provider_First_Name,
  ppi.Provider_Last_Name,
  ppi.Graduation_Year,
  ppi.Primary_Specialty,
  ppi.City,
  ppi.State,
  ppi.Total_Prescriptions,
  COALESCE(ppi_payments.Total_Payments, 0) AS Total_Payments,
  CASE
    WHEN ppi_payments.Provider_NPI IS NOT NULL THEN 'Received Payment'
    ELSE 'Did Not Receive Payment'
  END AS Payment_Status
FROM
  Provider_Prescription_Info ppi
LEFT JOIN
  Provider_Payment_Info ppi_payments ON ppi.Provider_NPI = ppi_payments.Provider_NPI
ORDER BY
  Total_Prescriptions DESC;"""

df10 = client.query(query).to_dataframe()

df10

import pandas as pd
import matplotlib.pyplot as plt

# Summary statistics
summary_stats = df10.groupby('Payment_Status').agg({'Total_Prescriptions': ['mean', 'std']})

# Visualization
plt.figure(figsize=(10, 6))

# Plotting the bar chart
summary_stats['Total_Prescriptions']['mean'].plot(kind='bar', color=['skyblue', 'orange'])
plt.errorbar(x=summary_stats.index, y=summary_stats['Total_Prescriptions']['mean'],
             yerr=summary_stats['Total_Prescriptions']['std'], fmt='none', ecolor='black', capsize=5)

# Adding error bars
plt.errorbar(x=summary_stats.index, y=summary_stats['Total_Prescriptions']['mean'],
             yerr=summary_stats['Total_Prescriptions']['std'], fmt='none', ecolor='black', capsize=5)

# Adding data labels
for bar in bars.patches:
    plt.annotate(format(bar.get_height(), '.2f'),
                 (bar.get_x() + bar.get_width() / 2,
                  bar.get_height()), ha='right', va='center',
                 size=10, xytext=(0, 8),
                 textcoords='offset points')

# Adding labels and title
plt.title('Mean Total Prescriptions by Payment Status')
plt.xlabel('Payment Status')
plt.ylabel('Mean Total Prescriptions')
plt.xticks(rotation=0)
plt.grid(axis='y', linestyle='--', alpha=0.7)

# Show plot
plt.tight_layout()
plt.show()

# Define your SQL query
query = """
WITH aggregated_payments AS (
  SELECT
    mp.Rndrng_Prvdr_Gndr AS Gender,
    EXTRACT(YEAR FROM op.Date_of_Payment) AS Payment_Year,
    SUM(op.Total_Amount_of_Payment_USDollars) AS Total_Payments
  FROM (
    SELECT Rndrng_NPI, Rndrng_Prvdr_Gndr FROM `udiirivbogbe.Medicare.medicare_physician`
    WHERE Rndrng_Prvdr_Crdntls IN ('MD', 'M.D.')
  ) mp
  JOIN (
    SELECT Covered_Recipient_NPI, Date_of_Payment, Total_Amount_of_Payment_USDollars FROM `udiirivbogbe.Open_payment.pgyr2018`
    UNION ALL
    SELECT Covered_Recipient_NPI, Date_of_Payment, Total_Amount_of_Payment_USDollars FROM `udiirivbogbe.Open_payment.pgyr2019`
    UNION ALL
    SELECT Covered_Recipient_NPI, Date_of_Payment, Total_Amount_of_Payment_USDollars FROM `udiirivbogbe.Open_payment.pgyr2020`
    UNION ALL
    SELECT Covered_Recipient_NPI, Date_of_Payment, Total_Amount_of_Payment_USDollars FROM `udiirivbogbe.Open_payment.pgyr2021`
    UNION ALL
    SELECT Covered_Recipient_NPI, Date_of_Payment, Total_Amount_of_Payment_USDollars FROM `udiirivbogbe.Open_payment.pgyr2022`
  ) op ON mp.Rndrng_NPI = op.Covered_Recipient_NPI
  GROUP BY Gender, Payment_Year
),
yearly_totals AS (
  SELECT
    Payment_Year,
    SUM(Total_Payments) AS Yearly_Total_Payments
  FROM aggregated_payments
  GROUP BY Payment_Year
)
SELECT
  ap.Gender,
  ap.Payment_Year,
  ap.Total_Payments,
  (ap.Total_Payments / yt.Yearly_Total_Payments) * 100 AS Percentage_of_Total_Payments
FROM aggregated_payments ap
JOIN yearly_totals yt ON ap.Payment_Year = yt.Payment_Year
ORDER BY ap.Payment_Year, ap.Gender;"""

df11 = client.query(query).to_dataframe()

df11

import matplotlib.pyplot as plt
import pandas as pd
import numpy as np

# Creating a pivot table
pivot_df = df11.pivot(index='Payment_Year', columns='Gender', values='Percentage_of_Total_Payments').fillna(0)

# Plotting
fig, ax = plt.subplots(figsize=(10, 6))

# Setting the positions and width for the bars
positions = np.arange(len(pivot_df))
width = 0.35

# Plotting the bars for Male and Female percentages
bars1 = ax.bar(positions - width/2, pivot_df['M'], width, label='Male', alpha=0.7)
bars2 = ax.bar(positions + width/2, pivot_df['F'], width, label='Female', alpha=0.7)

# Adding labels for each bar with only two decimal points
for bars in [bars1, bars2]:
    for bar in bars:
        height = bar.get_height()
        ax.annotate(f'{height:.2f}%',
                    xy=(bar.get_x() + bar.get_width() / 2, height),
                    xytext=(0, 3),  # 3 points vertical offset
                    textcoords="offset points",
                    ha='center', va='bottom')

# Setting the x-axis labels to the years, and y-axis label
ax.set_xticks(positions)
ax.set_xticklabels(pivot_df.index)
ax.set_ylabel('Total Payments(%)')

# Adding a title and a legend
plt.title('Percentage of Total Payments by Gender Over Years')
plt.legend()

# Showing the plot
plt.show()

# Define your SQL query
query = """WITH physician_prescriptions AS (
    SELECT
        mr.NPI,
        mr.Med_sch AS Medical_School,
        COUNT(mp.Prscrbr_NPI) AS Total_Prescriptions
    FROM
        `udiirivbogbe.Medicare.medicare_records` AS mr
    LEFT JOIN
        `udiirivbogbe.Medicare.medicare_partd` AS mp
    ON
        mr.NPI = mp.Prscrbr_NPI
    GROUP BY
        mr.NPI,
        mr.Med_sch
)

SELECT
    Medical_School,
    COUNT(*) AS Total_Physicians,
    SUM(Total_Prescriptions) AS Total_Prescriptions,
    AVG(Total_Prescriptions) AS Avg_Prescriptions_Per_Physician
FROM
    physician_prescriptions
GROUP BY
    Medical_School
ORDER BY
    Total_Prescriptions DESC
    LIMIT 20;"""

df12 = client.query(query).to_dataframe()

df12

import pandas as pd
import matplotlib.pyplot as plt

# Assuming df12 is defined and contains the necessary data

# Plotting the data
plt.figure(figsize=(16, 10))  # Adjusted for a horizontal bar chart

# Grouping by Medical_School and calculating the average prescriptions per physician
avg_prescriptions_per_physician = df12.groupby('Medical_School')['Avg_Prescriptions_Per_Physician'].mean().sort_values()

# Plotting the horizontal bar chart
bars = avg_prescriptions_per_physician.plot(kind='barh', color='skyblue', edgecolor='black')

# Adding data labels
for bar in bars.patches:
    plt.annotate(format(bar.get_width(), '.1f'),  # Format with one decimal place
                 (bar.get_width(), bar.get_y() + bar.get_height() / 2), ha='left', va='center',
                 xytext=(3, 0),  # 3 points horizontal offset
                 textcoords='offset points')

# Adding labels and title
plt.title('Average Prescriptions per Physician by Medical School')
plt.xlabel('Average Prescriptions per Physician')
plt.ylabel('Medical School')

plt.grid(axis='x', linestyle='--', alpha=0.7)

# Displaying the plot
plt.tight_layout()
plt.show()

